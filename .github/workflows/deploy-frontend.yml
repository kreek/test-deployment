name: Deploy Frontend

on:
  repository_dispatch:
    types: [trigger-frontend-build]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      DATA_DIR: data
      DEPLOYMENT_BRANCH: github-pages-deployment
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Update deployment branch with frontend build
        run: |
          # Check if deployment branch exists
          git fetch origin
          if git ls-remote --heads origin ${{ env.DEPLOYMENT_BRANCH }} | grep -q ${{ env.DEPLOYMENT_BRANCH }}; then
            echo "Deployment branch exists. Updating it..."
            git fetch origin ${{ env.DEPLOYMENT_BRANCH }}
            git checkout -b ${{ env.DEPLOYMENT_BRANCH }} --track origin/${{ env.DEPLOYMENT_BRANCH }}
          else
            echo "Deployment branch does not exist. Creating it..."
            # Create new orphan branch if it doesn't exist
            git checkout --orphan ${{ env.DEPLOYMENT_BRANCH }}
            git rm -rf .
          fi
          
          # Preserve data directory if it exists
          if [ -d "${{ env.DATA_DIR }}" ]; then
            mkdir -p /tmp/data-backup
            cp -r ${{ env.DATA_DIR }}/* /tmp/data-backup/
          fi
          
          # Clean the working directory except for .git
          find . -mindepth 1 -path ./.git -prune -o -exec rm -rf {} \; 2> /dev/null || true
          
          # Restore data directory
          if [ -d "/tmp/data-backup" ]; then
            mkdir -p ${{ env.DATA_DIR }}
            cp -r /tmp/data-backup/* ${{ env.DATA_DIR }}/
          fi
          
          # Copy frontend build files
          echo "Locating build output directory..."
          if [ -d "./frontend/build" ] && [ "$(ls -A ./frontend/build)" ]; then
            echo "Found build files at ./frontend/build"
            cp -r ./frontend/build/* .
          elif [ -d "./frontend/.svelte-kit/output/prerendered" ] && [ "$(ls -A ./frontend/.svelte-kit/output/prerendered)" ]; then
            echo "Found build files at ./frontend/.svelte-kit/output/prerendered"
            cp -r ./frontend/.svelte-kit/output/prerendered/* .
          else
            # Fallback: search for any build directory
            echo "Searching for build directory..."
            build_dir=$(find ./frontend -type d -name "build" -not -path "*/node_modules/*" | head -n 1)
            if [ -n "$build_dir" ] && [ -d "$build_dir" ] && [ "$(ls -A $build_dir)" ]; then
              echo "Found build files at $build_dir"
              cp -r $build_dir/* .
            else
              echo "ERROR: Build files not found!"
              ls -la ./frontend/
              exit 1
            fi
          fi
          
          # Create .nojekyll file to disable Jekyll processing
          touch .nojekyll
          
          # Commit and push changes
          git add -A
          if git diff --staged --quiet; then
            echo "No changes to commit for frontend build."
          else
            git commit -m "Update frontend build"
            git push origin ${{ env.DEPLOYMENT_BRANCH }}
          fi
      
      # Create artifact from the deployment branch content for GitHub Pages
      - name: Create GitHub Pages artifact
        run: |
          # Create a temporary directory for the artifact
          mkdir -p /tmp/github-pages
          
          # Copy all files (except .git) from the deployment branch
          cp -r $(ls -A | grep -v "^\.git$") /tmp/github-pages/
          
          # Change to the temp directory and create the artifact
          cd /tmp/github-pages
          
          # Upload the artifact
          cd $GITHUB_WORKSPACE
          tar -C /tmp/github-pages -czf $GITHUB_WORKSPACE/github-pages.tar.gz .

      - name: Upload GitHub Pages artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages
          path: github-pages.tar.gz
          retention-days: 1

  # Deploy job for GitHub Pages
  deploy-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4