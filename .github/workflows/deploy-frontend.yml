name: Deploy Frontend

on:
  repository_dispatch:
    types: [trigger-frontend-build]
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      FRONTEND_DIR: frontend
      BUILD_DIR: frontend/build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          set -e
          npm ci

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: |
          set -e
          npm run build

      - name: Verify build
        run: |
          set -e
          if [ ! -f "${{ env.BUILD_DIR }}/index.html" ]; then
            echo "Error: Built files appear to be invalid"
            exit 1
          fi
          echo "Build verification passed"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.BUILD_DIR }}
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    env:
      FRONTEND_BUILD_DIR: frontend-build
      DATA_DIR: data
      DEPLOYMENT_BRANCH: github-pages-deployment
      WORKTREE_PATH: /tmp/deployment-branch

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.FRONTEND_BUILD_DIR }}

      - name: Configure Git
        run: |
          set -e
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'

      - name: Update deployment branch with frontend files
        run: |
          set -e
          # Check if deployment branch exists
          if git ls-remote --heads origin ${{ env.DEPLOYMENT_BRANCH }} | grep -q ${{ env.DEPLOYMENT_BRANCH }}; then
            echo "Deployment branch exists. Updating it..."

            # Fetch the deployment branch
            git fetch origin ${{ env.DEPLOYMENT_BRANCH }}:${{ env.DEPLOYMENT_BRANCH }}

            # Create a worktree for the deployment branch
            git worktree add --detach ${{ env.WORKTREE_PATH }} ${{ env.DEPLOYMENT_BRANCH }}
            cd ${{ env.WORKTREE_PATH }}

            # Preserve data directory if it exists
            if [ -d "${{ env.DATA_DIR }}" ]; then
              echo "Preserving data directory..."
              mkdir -p /tmp/data-backup
              cp -r ${{ env.DATA_DIR }}/* /tmp/data-backup/
            fi

            # Safer file deletion - explicitly exclude important directories
            find . -mindepth 1 \
              -not -path "./.git*" \
              -not -path "./.github*" \
              -not -path "./.nojekyll" \
              -delete

            # Restore data directory if backed up
            if [ -d "/tmp/data-backup" ] && [ "$(ls -A /tmp/data-backup)" ]; then
              echo "Restoring data directory..."
              mkdir -p ${{ env.DATA_DIR }}
              cp -r /tmp/data-backup/* ${{ env.DATA_DIR }}/
              rm -rf /tmp/data-backup
            fi

            # Copy frontend build files
            echo "Copying frontend build files..."
            cp -r $GITHUB_WORKSPACE/${{ env.FRONTEND_BUILD_DIR }}/* .

            # Ensure .nojekyll file exists to disable Jekyll processing
            touch .nojekyll

            # Commit and push changes
            git add .
            if git diff --staged --quiet; then
              echo "No changes to commit for frontend files."
            else
              git commit -m "Update frontend files from commit: ${{ github.sha }}"
              git push origin ${{ env.DEPLOYMENT_BRANCH }}
            fi

            # Clean up
            cd $GITHUB_WORKSPACE
            git worktree remove ${{ env.WORKTREE_PATH }}

          else
            echo "Deployment branch does not exist. Creating it..."
            # Create new orphan branch
            git checkout --orphan ${{ env.DEPLOYMENT_BRANCH }}
            git rm -rf .

            # Copy frontend build files
            echo "Copying frontend build files..."
            cp -r $GITHUB_WORKSPACE/${{ env.FRONTEND_BUILD_DIR }}/* .

            # Create .nojekyll file to disable Jekyll processing
            touch .nojekyll

            # Create empty data directory with enhanced metadata
            mkdir -p ${{ env.DATA_DIR }}
            echo '{
              "last_updated": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
              "message": "Initial deployment"
            }' > ${{ env.DATA_DIR }}/placeholder.json

            git add .
            git commit -m "Initial frontend deployment from commit: ${{ github.sha }}"
            git push -u origin ${{ env.DEPLOYMENT_BRANCH }}
          fi

      # This step prepares files for GitHub Pages directly
      - name: Prepare GitHub Pages deployment
        run: |
          set -e
          echo "Preparing GitHub Pages deployment..."
          
          # Create temporary directory for GitHub Pages content
          rm -rf /tmp/pages-content
          mkdir -p /tmp/pages-content
          
          # Copy built files directly to the temporary directory
          cp -r ${{ env.FRONTEND_BUILD_DIR }}/* /tmp/pages-content/
          
          # Create .nojekyll file
          touch /tmp/pages-content/.nojekyll
          
          # Ensure data directory exists
          mkdir -p /tmp/pages-content/${{ env.DATA_DIR }}
          
          # Copy existing data if available from deployment branch
          if git ls-remote --heads origin ${{ env.DEPLOYMENT_BRANCH }} | grep -q ${{ env.DEPLOYMENT_BRANCH }}; then
            git fetch origin ${{ env.DEPLOYMENT_BRANCH }}
            git checkout FETCH_HEAD -- ${{ env.DATA_DIR }} || true
            
            if [ -d "${{ env.DATA_DIR }}" ]; then
              cp -r ${{ env.DATA_DIR }}/* /tmp/pages-content/${{ env.DATA_DIR }}/ || true
            fi
          else
            echo "No existing data to copy"
          fi
          
          # List files that will be included in the artifact
          echo "Files prepared for GitHub Pages:"
          ls -la /tmp/pages-content/
          
          # Create artifact
          cd /tmp/pages-content
          tar -czf $GITHUB_WORKSPACE/github-pages.tar.gz .
          cd $GITHUB_WORKSPACE

      - name: Upload GitHub Pages artifact
        uses: actions/upload-artifact@v4
        with:
          name: github-pages
          path: github-pages.tar.gz
          retention-days: 1
          if-no-files-found: error

      - name: Debug GitHub Pages settings
        run: |
          echo "IMPORTANT: Make sure GitHub Pages settings are configured correctly"
          echo "Required settings:"
          echo "- GitHub Pages must be enabled in repository settings"
          echo "- Source must be set to 'GitHub Actions' under Build and deployment"
          echo "- A custom domain can cause deployment issues if not properly configured"

  deploy-pages:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages

      - name: Output GitHub Pages URL
        if: success()
        run: |
          echo "GitHub Pages site deployed to: ${{ steps.deployment.outputs.page_url }}"