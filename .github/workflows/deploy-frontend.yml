name: Deploy Frontend

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write
  actions: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      FRONTEND_DIR: frontend
      DATA_DIR: data
      DEPLOYMENT_BRANCH: github-pages-deployment
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm ci

      - name: Build frontend
        working-directory: ${{ env.FRONTEND_DIR }}
        run: npm run build

      - name: Verify build output
        run: |
          if [ ! -d "${{ env.FRONTEND_DIR }}/build" ]; then
            echo "Error: Build directory not found"
            exit 1
          fi
          echo "Build verification passed"
      
      - name: Configure Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
      
      - name: Update deployment branch with frontend build
        run: |
          # Set environment variables for SvelteKit build
          export NODE_ENV=production
          
          # Set GitHub Pages specific info
          echo "Configuring repository for GitHub Pages deployment..."
          
          # Check if deployment branch exists
          if git ls-remote --exit-code --heads origin ${{ env.DEPLOYMENT_BRANCH }}; then
            # Clone the existing deployment branch to preserve data files
            mkdir -p /tmp/deployment-branch
            git worktree add --detach /tmp/deployment-branch origin/${{ env.DEPLOYMENT_BRANCH }}
            cd /tmp/deployment-branch
            
            # Preserve data directory if it exists
            if [ -d "${{ env.DATA_DIR }}" ]; then
              mkdir -p /tmp/data-backup
              cp -r ${{ env.DATA_DIR }}/* /tmp/data-backup/
            fi
            
            # Clean everything except .git
            find . -mindepth 1 -path ./.git -prune -o -exec rm -rf {} \; 2> /dev/null || true
            
            # Copy frontend build files
            cp -r $GITHUB_WORKSPACE/${{ env.FRONTEND_DIR }}/build/* .
            
            # Restore data directory
            if [ -d "/tmp/data-backup" ]; then
              mkdir -p ${{ env.DATA_DIR }}
              cp -r /tmp/data-backup/* ${{ env.DATA_DIR }}/
            fi
            
            # Create GitHub Pages specific files
            touch .nojekyll
            
            # Create a 404.html that redirects to index.html for SPA
            cat > 404.html << 'EOF'
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Redirecting...</title>
    <script>
      // Single Page App redirection
      const path = window.location.pathname;
      const baseUrl = '/test-deployment';
      if (path.startsWith(baseUrl)) {
        window.location.href = baseUrl + '/';
      } else {
        window.location.href = '/';
      }
    </script>
  </head>
  <body>
    <p>Redirecting to home page...</p>
  </body>
</html>
EOF
            
            # Verify all necessary files exist
            echo "Listing deployment files:"
            ls -la
            
            # Commit and push changes
            git add -A
            if git diff --staged --quiet; then
              echo "No changes to commit for frontend build."
            else
              git commit -m "Update frontend build"
              git push origin HEAD:${{ env.DEPLOYMENT_BRANCH }}
            fi
            
            # Clean up
            cd $GITHUB_WORKSPACE
            git worktree remove /tmp/deployment-branch
          else
            # Create new orphan branch with frontend build
            git checkout --orphan ${{ env.DEPLOYMENT_BRANCH }}
            git rm -rf .
            
            # Copy frontend build files
            cp -r ${{ env.FRONTEND_DIR }}/build/* .
            
            # Create empty data directory
            mkdir -p ${{ env.DATA_DIR }}
            
            # Create GitHub Pages specific files
            touch .nojekyll
            
            # Create a 404.html that redirects to index.html for SPA
            cat > 404.html << 'EOF'
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>Redirecting...</title>
    <script>
      // Single Page App redirection
      const path = window.location.pathname;
      const baseUrl = '/test-deployment';
      if (path.startsWith(baseUrl)) {
        window.location.href = baseUrl + '/';
      } else {
        window.location.href = '/';
      }
    </script>
  </head>
  <body>
    <p>Redirecting to home page...</p>
  </body>
</html>
EOF
            
            git add -A
            git commit -m "Initial frontend build"
            git push origin ${{ env.DEPLOYMENT_BRANCH }}
          fi
      
      - name: Output GitHub Pages URL
        run: |
          echo "GitHub Pages site deployed to: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/"